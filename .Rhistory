DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM mysql.world LIMIT 10")
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM world LIMIT 10")
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM world.country LIMIT 10")
X$mysql$metamap
X$mysql$metamap[(schema_name == "world")]
X$make.virtual_database(conn = "mysql", target_env = globalenv(), country)
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM mysql.world.country LIMIT 10")
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM [mysql].[world].[country] LIMIT 10")
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM world.country LIMIT 10")
debug(X$make.virtual_database)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), country)
.tables
rbindlist(list(.tables, .views) |> purrr::compact(), fill = TRUE)
rbindlist(list(.tables, .views) |> purrr::compact(), use.names = FALSE)
rbindlist(list(.tables, .views) |> purrr::compact(), use.names = FALSE, fill = TRUE)
rbindlist(list(.tables, .views |> data.table::setnames(c("schema_name", "tbl_name"))) |> purrr::compact(), fill = TRUE)
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM world.country LIMIT 10")
X$make.virtual_database(conn = "mysql", target_env = globalenv(), country)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), country, account)
staff_list |> head(10)
purrr::walk(db_conns, dbDisconnect)
rm(db_conns)
# PKGDOWN ----
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
# PKGDOWN ----
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
remotes::install_github("delriaan/DBOE", "June2023", "pkg")
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
dplyr::sql("dbo.this")
keyring::keyring_list()
keyring::key_list(keyring = "local")
keyring::key_list(keyring = "local", service = "SQLServer") # #zLys43?JbV,G{}kaE4)
keyring::key_get(keyring = "local", service = "SQLServer") # #zLys43?JbV,G{}kaE4)
keyring::key_get(keyring = "local", service = "SQLServer", username = "imperial_agent") # #zLys43?JbV,G{}kaE4)
easy_pass <- book.of.utilities::kr_key(service = "MSSQL", username = "imperial_agent", keyring = "local")
easy_pass_mssql <- book.of.utilities::kr_key(service = "MSSQL", username = "imperial_agent", keyring = "local")
easy_pass_mysql <- book.of.utilities::kr_key(service = "MySQL", username = "imperial_agent", keyring = "local")
easy_pass_mysql <- book.of.utilities::kr_key(service = "MySQL", username = "delriaan", keyring = "local")
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, server = "imperialtower\imperialserver"
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, server = "imperialtower\\imperialserver"
, database = "mysql"
, user = "delriaan"
, password = easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, server = "imperialtower\\imperialserver"
, database = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = easy_pass_mssql@get())
)}
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, server = "imperialtower\\imperialserver"
, database = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = easy_pass_mssql@get())
)}
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(odbc::odbc(), "GW2DB"
, server = "imperialtower\\imperialserver"
, database = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = easy_pass_mssql@get())
)}
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(odbc::odbc(), "GW2DB"
, server = "imperialtower\\imperialserver"
, database = "GW2DB"
, case = "nochange"
, username = "imperial_agent"
, password = easy_pass_mssql@get())
)}
DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, host = "imperialtower\\imperialserver"
, database = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = easy_pass_mssql@get())
DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = easy_pass_mssql@get())
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = easy_pass_mssql@get())
)}
library(DBOE)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
rm(easy_pass, easy_pass_mssql, easy_pass_mysql)
.easy_pass_mssql <- book.of.utilities::kr_key(service = "MSSQL", username = "imperial_agent", keyring = "local")
.easy_pass_mysql <- book.of.utilities::kr_key(service = "MySQL", username = "delriaan", keyring = "local")
DBI::dbListTables(db_conns$GW2DB)
X$GW2DB %look.for% "dim"
dplyr::tbl(db_conns$GW2DB, dplyr::sql("dbo.dim_items"))
install.packages(c("dbplyr", "odbc"))
library(DBOE)
.easy_pass_mssql <- book.of.utilities::kr_key(service = "MSSQL", username = "imperial_agent", keyring = "local")
.easy_pass_mysql <- book.of.utilities::kr_key(service = "MySQL", username = "delriaan", keyring = "local")
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = .easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get())
)}
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
DBI::dbListTables(db_conns$GW2DB)
X$GW2DB %look.for% "dim"
dplyr::tbl(db_conns$GW2DB, dplyr::sql("dbo.dim_items"))
?schema
??schema
dbplyr::in_schema(schema = "dbo", table = "dim_items")
dbplyr::in_schema(schema = dplyr::sql("dbo"), table = dplyr::sql("dim_items"))
dplyr::tbl(db_conns$GW2DB, dbplyr::in_schema(schema = dplyr::sql("dbo"), table = dplyr::sql("dim_items")))
db_conns$GW2DB@odbc
db_conns$GW2DB@odbc |> str()
db_conns$GW2DB |> str()
dplyr::tbl(db_conns$GW2DB, dbplyr::in_schema(schema = dplyr::sql("dbo"), table = dplyr::sql("dim_items")))
DBI::dbListTables(db_conns$GW2DB)
X$GW2DB %look.for% "dim"
dplyr::tbl(db_conns$GW2DB, "dbo.dim_items")
dplyr::tbl(db_conns$GW2DB, "dim_items")
X$GW2DB %look.for% "dim|dbo"
X$GW2DB %look.for% "dim|dbo" |> unique()
(function(x){ rlang::enexpr(x) |> as.character() })(this)
(function(x){ rlang::enexpr(x) |> as.character() })("this")
library(DBOE)
.easy_pass_mssql <- book.of.utilities::kr_key(service = "MSSQL", username = "imperial_agent", keyring = "local")
.easy_pass_mysql <- book.of.utilities::kr_key(service = "MySQL", username = "delriaan", keyring = "local")
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = .easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get())
)}
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), sch = dbo, dim_items, character, profession)
library(DBOE)
.easy_pass_mssql <- book.of.utilities::kr_key(service = "MSSQL", username = "imperial_agent", keyring = "local")
.easy_pass_mysql <- book.of.utilities::kr_key(service = "MySQL", username = "delriaan", keyring = "local")
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = .easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get())
)}
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), sch = dbo, dim_items, character, profession)
dim_items
.easy_pass_mssql
.easy_pass_mssql@get() |> writeClipboard()
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = .easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(odbc::odbc(), "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get())
)}
DBI::dbConnect(odbc::odbc(), "GW2DB"
, case = "nochange"
, usr = "imperial_agent"
, password = .easy_pass_mssql@get())
DBI::dbConnect(odbc::odbc(), "GW2DB"
, case = "nochange"
, username = "imperial_agent"
, password = .easy_pass_mssql@get())
DBI::dbConnect(odbc::odbc(), "GW2DB"
, case = "nochange"
# , username = "imperial_agent"
, password = .easy_pass_mssql@get())
DBI::dbConnect(odbc::odbc(), "GW2DB"
# , case = "nochange"
# , username = "imperial_agent"
, password = .easy_pass_mssql@get())
DBI::dbConnect(odbc::odbc(), "GW2DB"
# , case = "nochange"
# , username = "imperial_agent"
# , password = .easy_pass_mssql@get()
)
debug(odbc::odbc)
DBI::dbConnect(odbc::odbc(), "GW2DB"
# , case = "nochange"
# , username = "imperial_agent"
# , password = .easy_pass_mssql@get()
)
DBI::dbConnect(odbc::odbc(), "GW2DB"
# , case = "nochange"
# , username = "imperial_agent"
# , password = .easy_pass_mssql@get()
)
DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get())
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get())
undebug(odbc::odbc)
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get())
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, database = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get())
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, database = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get())
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, database = "GW2DB"
, case = "nochange"
, usr = "imperial_agent"
, password = .easy_pass_mssql@get())
odbc::odbc()
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, case = "nochange"
# , user = "imperial_agent"
# , password = .easy_pass_mssql@get()
)
.easy_pass_mssql@get() |> writeClipboard()
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, Driver = "SQL Server"
, Server = "imperialtower\\imperialserver"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, Driver = "ODBC Driver 18 for SQL Server"
, Server = remoterUtils::hostname2addr("imperialtower")
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
remoterUtils::hostname2addr("imperialtower")
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, server = remoterUtils::hostname2addr("imperialtower")
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
DBI::dbConnect(RODBCDBI::ODBC()
, dsn = "GW2DB"
, server = remoterUtils::hostname2addr("imperialtower")
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
DBI::dbConnect(RODBCDBI::ODBC()
, dsn = "GW2DB"
, Server = remoterUtils::hostname2addr("imperialtower")
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
DBI::dbConnect(RODBCDBI::ODBC()
, dsn = "GW2DB"
, hostname = remoterUtils::hostname2addr("imperialtower")
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
DBI::dbConnect(RODBCDBI::ODBC()
, dsn = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc()
, dsn = "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = .easy_pass_mysql@get())
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC()
, dsn = "GW2DB"
, case = "nochange"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
)}
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), sch = dbo, dim_items, character, profession)
DBI::dbListTables(db_conns$GW2DB)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), sch = sys, tables)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), sch = sys, table)
X$GW2DB %look.for% "dim|sys" |> unique()
dplyr::tbl(db_conns$GW2DB, "dim_items")
dim_items
dim_items |> head()
debug(tbl)
debug(dplyr::tbl)
dim_items |> head()
library(dplyr)
dim_items |> head()
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, case = "nochange"
, host = "imperialtower\\imperialserver"
, user = "imperial_agent"
, password = .easy_pass_mssql@get()
)
DBI::dbConnect(odbc::odbc()#RODBCDBI::ODBC()
, dsn = "GW2DB"
, case = "nochange"
, host = "imperialtower\\imperialserver"
, username = "imperial_agent"
, password = .easy_pass_mssql@get()
)
RODBC::odbcCOnnect(
dsn = "GW2DB"
, case = "nochange"
, uid = "imperial_agent"
, pwd = .easy_pass_mssql@get()
)
RODBC::odbcConnect(
dsn = "GW2DB"
, case = "nochange"
, uid = "imperial_agent"
, pwd = .easy_pass_mssql@get()
)
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc()
, dsn = "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = .easy_pass_mysql@get())
, GW2DB = RODBC::odbcConnect(
dsn = "GW2DB"
, case = "nochange"
, uid = "imperial_agent"
, pwd = .easy_pass_mssql@get()
)
# , GW2DB = DBI::dbConnect(RODBCDBI::ODBC()
# 												, dsn = "GW2DB"
# 												, case = "nochange"
# 												, user = "imperial_agent"
# 												, password = .easy_pass_mssql@get()
# 												)
)}
View(db_conns)
db_conns$GW2DB
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
RODBCDBI::dbConnect(
dsn = "GW2DB"
, case = "nochange"
, uid = "imperial_agent"
, pwd = .easy_pass_mssql@get()
)
RODBCDBI::dbConnect(
drv = RODBCDBI::ODBC()
, dsn = "GW2DB"
, case = "nochange"
, uid = "imperial_agent"
, pwd = .easy_pass_mssql@get()
)
odbc::odbcListDrivers()
RODBCDBI::dbConnect(
drv = odbc::odbc()
, dsn = "GW2DB"
, case = "nochange"
, uid = "imperial_agent"
, pwd = .easy_pass_mssql@get()
)
db_conns <- { list(
mysql = DBI::dbConnect(odbc::odbc()
, dsn = "MySQL"
, server = "imperialtower"
, database = "mysql"
, user = "delriaan"
, password = .easy_pass_mysql@get())
, GW2DB = RODBCDBI::dbConnect(
drv = odbc::odbc()
, dsn = "GW2DB"
, case = "nochange"
, uid = "imperial_agent"
, pwd = .easy_pass_mssql@get()
)
# , GW2DB = DBI::dbConnect(RODBCDBI::ODBC()
# 												, dsn = "GW2DB"
# 												, case = "nochange"
# 												, user = "imperial_agent"
# 												, password = .easy_pass_mssql@get()
# 												)
)}
View(db_conns)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), sch = dbo, dim_items, character, profession)
undebug(dplyr::tbl)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), sch = dbo, dim_items, character, profession)
DBI::dbListTables(db_conns$GW2DB)
X$GW2DB %look.for% "dim|sys" |> unique()
dplyr::tbl(db_conns$GW2DB, "dim_items")
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM world.country LIMIT 10")
