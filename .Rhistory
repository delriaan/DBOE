# 	, keyring
# 	, tictoc
# 	, "data.table{+%like%}"
# 	)
library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, jobs = profession)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), rental, staff)
purrr::walk(db_conns, dbDisconnect)
rm(db_conns)
library(DBOE)
library(DBOE)
library(DBOE)
library(DBOE)
library(DBOE)
library(DBOE)
install.packages(c("dbplyr", "purrr"))
install.packages("stringi")
library(DBOE)
# VALIDATION ----
# library(book.of.workflow);
# load_unloaded(purrr
# 	, stringi
# 	, magrittr
# 	, rlang
# 	, DBI
# 	, httr
# 	, keyring
# 	, tictoc
# 	, "data.table{+%like%}"
# 	)
library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, jobs = profession)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), rental, staff)
debug(X$make.virtual_database)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, jobs = profession)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", dim_items, character, profession)
View(.Last.value)
View(X)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", dim_items, character, profession)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", dim_items, character, profession)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
list(.tables, .views) |> purrr::compact()
.views <- ls(db_env, pattern = "^(sys.)?views$");
db_env[[.views]]
.views
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
.tables
detach("package:DBOE", unload = TRUE)
source("D:/Imperial Git Repos/DBOE/pkg/R/DBOE.R")
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
of.workflow);
# load_unloaded(purrr
# 	, stringi
# 	, magrittr
# 	, rlang
# 	, DBI
# 	, httr
# 	, keyring
# 	, tictoc
# 	, "data.table{+%like%}"
# 	)
library(book.of.workflow);
load_unloaded(purrr
, stringi
, magrittr
, rlang
, DBI
, httr
, keyring
, tictoc
, "data.table{+%like%}"
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
debug(X$get.metadata)
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
source("D:/Imperial Git Repos/DBOE/pkg/R/DBOE.R")
library(book.of.workflow);
load_unloaded(purrr
, stringi
, magrittr
, rlang
, DBI
, httr
, keyring
, tictoc
, "data.table{+%like%}"
)
# 	, stringi
# 	, magrittr
# 	, rlang
# 	, DBI
# 	, httr
# 	, keyring
# 	, tictoc
# 	, "data.table{+%like%}"
# 	)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
library(magrittr)
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
source("D:/Imperial Git Repos/DBOE/pkg/R/DBOE.R")
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
load_unloaded(purrr
, stringi
, magrittr
, rlang
, DBI
, httr
, keyring
, tictoc
, "data.table{+%like%}"
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
source("pkg/R/DBOE.R")
source("pkg/R/DBOE.R")
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
debug(X$make.virtual_database)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
list(.tables, .views)
list(.tables, .views) |> purrr::compact()
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
rbindlist(list(.tables, .views) |> purrr::compact(), fill = TRUE)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
obj_queue
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), rental, staff)
debug(X$make.virtual_database)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
\(...) assign(...elt(3) , dplyr::tbl(
src = private$connections[[db]]
, from = if (db == "mysql"){
dbplyr::in_schema(...elt(1), ...elt(2))
} else {
dbplyr::in_catalog(db, ...elt(1), ...elt(2))
}
)
)
\(...) assign(...elt(3) , dplyr::tbl(
src = private$connections[[db]]
, from = if (db == "mysql"){
dbplyr::in_schema(...elt(1), ...elt(2))
} else {
dbplyr::in_catalog(db, ...elt(1), ...elt(2))
}
)
, envir = target_env
)
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
X$GW2DB %look.for% profession
X$GW2DB %look.for% "profession"
debug(X$make.virtual_database)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
.tables
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), rental, staff)
debug(X$make.virtual_database)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), rental, staff)
debug(.assign_fun)
i
(length(i) == 2)
db
DBI::dbGetInfo(private$connections[[db]])
DBI::dbGetInfo(private$connections[["GW2DB"]])
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), rental, staff)
debug(X$make.virtual_database)
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), rental, staff)
debug(X$make.virtual_database)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), rental, staff)
debug(.assign_fun)
i
dbplyr::in_catalog(catalog = i$database, schema = i$schema_name, table = i$tbl_name)
dbplyr::in_catalog(catalog = dbplyr::sql(paste(i$database, i$schema_name, i$tbl_name, sep = ".")))
dbplyr::in_catalog(catalog = dbplyr::as.sql(src, i$database, i$schema_name, i$tbl_name))
dbplyr::in_catalog(catalog = dbplyr::sql(i$database), schema = dbplyr::sql(i$schema_name), table = dbplyr::sql(i$tbl_name))
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), rental, staff)
X$mysql$accounts
X$make.virtual_database(conn = "mysql", target_env = globalenv(), account)
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), account, category)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), account, category)
`NA` |> head()
X$mysql$country
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM mysql.world LIMIT 10")
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM world LIMIT 10")
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM world.country LIMIT 10")
X$mysql$metamap
X$mysql$metamap[(schema_name == "world")]
X$make.virtual_database(conn = "mysql", target_env = globalenv(), country)
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM mysql.world.country LIMIT 10")
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM [mysql].[world].[country] LIMIT 10")
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM world.country LIMIT 10")
debug(X$make.virtual_database)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), country)
.tables
rbindlist(list(.tables, .views) |> purrr::compact(), fill = TRUE)
rbindlist(list(.tables, .views) |> purrr::compact(), use.names = FALSE)
rbindlist(list(.tables, .views) |> purrr::compact(), use.names = FALSE, fill = TRUE)
rbindlist(list(.tables, .views |> data.table::setnames(c("schema_name", "tbl_name"))) |> purrr::compact(), fill = TRUE)
library(DBOE)
# library(DBOE)
db_conns <- list(
mysql = DBI::dbConnect(odbc::odbc(), "MySQL"
, database = "mysql"
, user = "delriaan"
, password = keyring::key_get(service = "MySQL", username = "delriaan", keyring = "R"))
, GW2DB = DBI::dbConnect(RODBCDBI::ODBC(), "GW2DB"
# , server = "imperialtower"
# , database = "GW2DB"
# , case = "nochange"
# , database = "GW2DB"
, user = "imperial_agent"
, password = keyring::key_get(service = "MSSQL", username = "imperial_agent", keyring = "R"))
)
# source("pkg/R/DBOE.R")
X <- DBOE$new()
# debug(X$get.metadata)
X$get.metadata(!!!db_conns)
# undebug(X$make.virtual_database)
X$make.virtual_database(conn = "GW2DB", target_env = globalenv(), dim_items, character, profession)
DBI::dbGetQuery(db_conns$mysql, "SELECT * FROM world.country LIMIT 10")
X$make.virtual_database(conn = "mysql", target_env = globalenv(), country)
X$make.virtual_database(conn = "mysql", target_env = globalenv(), country, account)
staff_list |> head(10)
purrr::walk(db_conns, dbDisconnect)
rm(db_conns)
# PKGDOWN ----
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
# PKGDOWN ----
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
remotes::install_github("delriaan/DBOE", "June2023", "pkg")
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
library(DBOE)
# PKGDOWN ----
pkgdown::build_site(pkg = "pkg", override = list(destination = "../docs"))
library(DBOE)
detach("package:DBOE", unload = TRUE)
library(DBOE)
detach("package:DBOE", unload = TRUE)
library(DBOE)
